{"version":3,"sources":["../src/index.js"],"names":["require","config","express","bodyParser","account","path","app","use","json","static","join","__dirname","get","req","res","next","address","query","getAccount","then","console","log","catch","post","body","selectedAsset","updateAccount","sendFile","port","process","env","PORT","listen"],"mappings":";;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMM,GAAG,GAAGJ,OAAO,EAAnB;AAEAI,GAAG,CAACC,GAAJ,CAASJ,UAAU,CAACK,IAAX,EAAT,E,CAA+B;;AAE/BF,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBL,OAAO,CAACO,MAAR,CAAeJ,IAAI,CAACK,IAAL,CAAUC,SAAV,EAAqB,wBAArB,CAAf,CAAnB;AAEAL,GAAG,CAACM,GAAJ,CAAQ,cAAR,EAAwB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1C,MAAMC,OAAO,GAAGH,GAAG,CAACI,KAAJ,CAAUD,OAA1B;AACAZ,EAAAA,OAAO,CAACc,UAAR,CAAmBF,OAAnB,EACGG,IADH,CACSf,OAAD,IAAa;AACjBgB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBjB,OAAvB;AACAU,IAAAA,GAAG,CAACN,IAAJ,CAAS;AAAEJ,MAAAA;AAAF,KAAT;AACD,GAJH,EAKGkB,KALH,CAKSP,IALT;AAOD,CATD;AAWAT,GAAG,CAACiB,IAAJ,CAAS,cAAT,EAAyB,CAACV,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC3C,MAAIC,OAAO,GAAGH,GAAG,CAACW,IAAJ,CAASR,OAAvB;AACA,MAAIS,aAAa,GAAGZ,GAAG,CAACW,IAAJ,CAASC,aAA7B;AACArB,EAAAA,OAAO,CAACsB,aAAR,CAAsBV,OAAtB,EAA+BS,aAA/B,EACGN,IADH,CACSf,OAAD,IAAa;AACjBU,IAAAA,GAAG,CAACN,IAAJ,CAAS;AAAEJ,MAAAA;AAAF,KAAT;AACD,GAHH,EAIGkB,KAJH,CAISP,IAJT;AAKD,CARD;AAUAT,GAAG,CAACM,GAAJ,CAAQ,WAAR,EAAqB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACrCD,EAAAA,GAAG,CAACN,IAAJ,CAAS;AAAE,eAAW;AAAb,GAAT;AACH,CAFD;AAIAF,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACa,QAAJ,CAAatB,IAAI,CAACK,IAAL,CAAUC,SAAV,EAAqB,4BAArB,CAAb;AACD,CAFD;AAIA,IAAMiB,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAzB,GAAG,CAAC0B,MAAJ,CAAWJ,IAAX,EAAiB,MAAM;AACnBR,EAAAA,OAAO,CAACC,GAAR,yCAA6CO,IAA7C;AACH,CAFD","sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst account = require('./account');\nconst path = require(\"path\");\nconst app = express();\n\napp.use( bodyParser.json() );  // to support JSON-encoded bodies\n\napp.use('/static', express.static(path.join(__dirname, \"../client/build/static\")));\n\napp.get('/api/account', (req, res, next) => {\n  const address = req.query.address;\n  account.getAccount(address)\n    .then((account) => {\n      console.log('account', account);\n      res.json({ account });\n    })\n    .catch(next);\n\n});\n\napp.post('/api/account', (req, res, next) => {\n  let address = req.body.address;\n  let selectedAsset = req.body.selectedAsset;\n  account.updateAccount(address, selectedAsset)\n    .then((account) => {\n      res.json({ account });\n    })\n    .catch(next);\n});\n\napp.get('/api/test', (req, res, next) => {\n    res.json({ 'message': 'hello world' });\n});\n\napp.get(\"/\", (req, res) => {\n  res.sendFile(path.join(__dirname, \"../client/build/index.html\"));\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n    console.log(`Node server listening on port ${port}`);\n});\n"],"file":"index.js"}