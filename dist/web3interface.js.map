{"version":3,"sources":["../src/web3interface.js"],"names":["Web3","require","fs","transactionCount","getPodContract","signingAccount","web3","eth","accounts","privateKeyToAccount","process","env","ETH_PRIVATE_KEY","infuraSubdomain","NODE_ENV","INFURA_KEY","PodContractAddress","PodContract","JSON","parse","readFileSync","PodContractABI","Contract","from","address","gas","gasPrice","nextNonce","getTransactionCount"],"mappings":";;;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAIE,gBAAgB,GAAG,CAAC,CAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAW;AACjC,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASC,QAAT,CAAkBC,mBAAlB,CAAsC,OAAOC,OAAO,CAACC,GAAR,CAAYC,eAAzD,CAAvB;AACA,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAR,CAAYG,QAAZ,KAAyB,YAAzB,GACrB,SADqB,GAErB,SAFH;AAGA,MAAMR,IAAI,GAAG,IAAIN,IAAJ,mBAAoBa,eAApB,2BAAoDH,OAAO,CAACC,GAAR,CAAYI,UAAhE,EAAb;AACA,MAAMC,kBAAkB,GAAG,OAA3B;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWjB,EAAE,CAACkB,YAAH,CAAgB,4BAAhB,EAA8C,MAA9C,CAAX,CAApB;AACA,MAAMC,cAAc,GAAGJ,WAAW,CAAC,KAAD,CAAlC;AACA,SAAO,IAAIX,IAAI,CAACC,GAAL,CAASe,QAAb,CAAsBD,cAAtB,EAAsCL,kBAAtC,EACP;AACCO,IAAAA,IAAI,EAAElB,cAAc,CAACmB,OADtB;AAECC,IAAAA,GAAG,EAAE,SAFN;AAGCC,IAAAA,QAAQ,EAAE;AAHX,GADO,CAAP;AAMA,CAfD;;;;SAkBeC,S;;;;;iCAAf,aAA2B;AAC1B,QAAGxB,gBAAgB,GAAG,CAAtB,EAAyB;AACxBA,MAAAA,gBAAgB,SAASG,IAAI,CAACC,GAAL,CAASqB,mBAAT,CAA6BvB,cAAc,CAACmB,OAA5C,EAAqD,SAArD,CAAzB;AACA;;AACD,WAAOrB,gBAAgB,EAAvB;AACA,G","sourcesContent":["const Web3 = require('web3');\nconst fs = require('fs');\n\nvar transactionCount = -1;\n\nconst getPodContract = function() {\n\tconst signingAccount = web3.eth.accounts.privateKeyToAccount('0x' + process.env.ETH_PRIVATE_KEY);\n\tconst infuraSubdomain = process.env.NODE_ENV === 'production'\n\t\t? 'mainnet'\n\t\t: 'ropsten'\n\tconst web3 = new Web3(`https://${infuraSubdomain}.infura.io/v3/${process.env.INFURA_KEY}`);\n\tconst PodContractAddress = '0x...';\n\tconst PodContract = JSON.parse(fs.readFileSync('./contracts/FlavorPod.json', 'utf8'));\n\tconst PodContractABI = PodContract['abi'];\n\treturn new web3.eth.Contract(PodContractABI, PodContractAddress,\n\t{\n\t\tfrom: signingAccount.address,\n\t\tgas: '1500000',\n\t\tgasPrice: 20000000000,\n\t});\n}\n\n\nasync function nextNonce() {\n\tif(transactionCount < 0) {\n\t\ttransactionCount = await web3.eth.getTransactionCount(signingAccount.address, \"pending\");\n\t}\n\treturn transactionCount++;\n}\n\nexport {\n    getPodContract\n};\n"],"file":"web3interface.js"}