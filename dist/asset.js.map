{"version":3,"sources":["../src/asset.js"],"names":["coinmarketcap","require","Datastore","datastore","ASSETS","endPrizePeriod","startPrizePeriod","assetPrices","fetchAssetPrices","entities","assetDataResults","forEach","asset","index","assetKey","key","assetData","name","value","push","data","upsert","_getAssetEntities","assetKeys","map","Promise","resolve","reject","get","then","results","err","_percentChange","startPrice","latestPrice","priceDiff","updateAssetPrices","assetEntities","assetEntity","console","log","prizePeriodStartPrice","getAssetPrices","runQuery","createQuery"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst coinmarketcap = require('./lib/coinmarketcap');\nconst Datastore = require('@google-cloud/datastore');\n\nconst datastore = new Datastore();\n\nconst ASSETS = [\"BTC\", \"ETH\", \"LINK\"];\n\nasync function endPrizePeriod() {\n  // TODO: call completeAward method on prize strategy contract\n}\n\nasync function startPrizePeriod() {\n\n    const assetPrices = await coinmarketcap.fetchAssetPrices(ASSETS);\n    const entities = [];\n    const assetDataResults = [];\n    ASSETS.forEach((asset, index) => {\n\n      const assetKey = datastore.key(['AssetPrice', asset]);\n      const assetData = [\n        {\n          name: 'asset',\n          value: asset,\n        },\n        {\n          name: 'prizePeriodStartPrice',\n          value: assetPrices[asset],\n        },\n        {\n          name: 'latestPrice',\n          value: assetPrices[asset],\n        },\n        {\n          name: 'percentChange',\n          value: 0,\n        },\n      ];\n      assetDataResults.push(assetData);\n      entities.push({\n        key: assetKey,\n        data: assetData,\n      });\n\n    });\n\n    await datastore.upsert(entities);\n\n    return {\n      assetDataResults\n    }\n\n}\n\nasync function _getAssetEntities() {\n  const assetKeys = ASSETS.map(asset => datastore.key(['AssetPrice', asset]));\n  return new Promise((resolve, reject) => {\n    datastore.get(assetKeys).then((results, err) => {\n      results\n       ? resolve(results)\n       : reject(err);\n    });\n  });\n}\n\nfunction _percentChange(startPrice, latestPrice) {\n  const priceDiff = latestPrice - startPrice;\n  return priceDiff/startPrice * 100;\n}\n\nasync function updateAssetPrices() {\n\n    const assetEntities = await _getAssetEntities();\n    const assetPrices = await coinmarketcap.fetchAssetPrices(ASSETS);\n    const entities = [];\n    const assetDataResults = [];\n    assetEntities[0].forEach((assetEntity, index) => {\n      const latestPrice = assetPrices[assetEntity.asset];\n      console.log(`latest price for ${assetEntity.asset} is ${latestPrice}`);\n      const assetKey = datastore.key(['AssetPrice', assetEntity.asset]);\n      const assetData = [\n        {\n          name: 'asset',\n          value: assetEntity.asset,\n        },\n        {\n          name: 'prizePeriodStartPrice',\n          value: assetEntity.prizePeriodStartPrice,\n        },\n        {\n          name: 'latestPrice',\n          value: latestPrice,\n        },\n        {\n          name: 'percentChange',\n          value: _percentChange(assetEntity.prizePeriodStartPrice, latestPrice),\n        },\n      ];\n      //console.log(assetEntity, assetData);\n      assetDataResults.push(assetData);\n      entities.push({\n        key: assetKey,\n        data: assetData,\n      });\n\n    });\n\n    await datastore.upsert(entities);\n\n    return {\n      assetDataResults\n    }\n\n}\n\nasync function getAssetPrices() {\n  const [assetPrices] = await datastore.runQuery(\n    datastore.createQuery('AssetPrice')\n  );\n  return assetPrices;\n}\n\n\n export {\n     startPrizePeriod, endPrizePeriod, updateAssetPrices, getAssetPrices\n };\n"],"file":"asset.js"}