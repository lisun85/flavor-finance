{"version":3,"sources":["../src/asset.js"],"names":["coinmarketcap","require","Datastore","datastore","ASSETS","endPrizePeriod","winner","calculateWinner","saveWinner","completeAward","podContract","web3interface","getPodContract","methods","send","from","process","env","ETH_SIGNING_ACCOUNT","gas","error","txHash","console","log","assetPrices","runQuery","createQuery","sort","a","b","percentChange","today","Date","toISOString","slice","winnerKey","key","entity","data","name","value","asset","prizePeriodStartPrice","latestPrice","save","startPrizePeriod","fetchAssetPrices","entities","assetDataResults","forEach","index","assetKey","assetData","push","upsert","_getAssetEntities","assetKeys","map","Promise","resolve","reject","get","then","results","err","_percentChange","startPrice","priceDiff","updateAssetPrices","assetEntities","assetEntity","getAssetPrices","filter","includes","getHistory","historyRecords","order","descending"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst coinmarketcap = require('./lib/coinmarketcap');\nconst Datastore = require('@google-cloud/datastore');\n\nconst datastore = new Datastore();\n\nconst ASSETS = [\"BTC\", \"ETH\", \"SDEFI\"];\n\nasync function endPrizePeriod() {\n  // TODO: call completeAward method on prize strategy contract\n  //await completeAward();\n  const winner = await calculateWinner();\n  saveWinner(winner);\n\n  // TODO: replace this with event so it will always be onchain result\n}\n\nasync function completeAward() {\n  const podContract = web3interface.getPodContract();\n  podContract.methods.completeAward()\n  .send({ from: process.env.ETH_SIGNING_ACCOUNT, gas: '1500000' }, async (error, txHash) => {\n    if (error) {\n        //onTxHash && onTxHash('')\n        console.log(\"Depositing error\", error)\n        return false\n    }\n  });\n\n}\nasync function calculateWinner() {\n  const [assetPrices] = await datastore.runQuery(\n    datastore.createQuery('AssetPrice')\n  );\n\n  assetPrices.sort((a, b) => b.percentChange - a.percentChange);\n  const winner = assetPrices[0];\n  console.log('winner', winner);\n  return winner;\n}\n\nasync function saveWinner(winner){\n  const today = new Date().toISOString().slice(0, 10);\n  const winnerKey = datastore.key(['PrizePeriodHistory', today]);\n  const entity = {\n    key: winnerKey,\n    data: [\n      {\n        name: 'date',\n        value: today,\n      },\n      {\n        name: 'asset',\n        value: winner.asset,\n      },\n      {\n        name: 'prizePeriodStartPrice',\n        value: winner.prizePeriodStartPrice,\n      },\n      {\n        name: 'latestPrice',\n        value: winner.latestPrice,\n      },\n      {\n        name: 'percentChange',\n        value: winner.percentChange,\n      },\n    ],\n  };\n  await datastore.save(entity);\n  return {\n    winner\n  }\n}\n\n\nasync function startPrizePeriod() {\n\n    const assetPrices = await coinmarketcap.fetchAssetPrices(ASSETS);\n    const entities = [];\n    const assetDataResults = [];\n    ASSETS.forEach((asset, index) => {\n\n      const assetKey = datastore.key(['AssetPrice', asset]);\n      const assetData = [\n        {\n          name: 'asset',\n          value: asset,\n        },\n        {\n          name: 'prizePeriodStartPrice',\n          value: assetPrices[asset],\n        },\n        {\n          name: 'latestPrice',\n          value: assetPrices[asset],\n        },\n        {\n          name: 'percentChange',\n          value: 0,\n        },\n      ];\n      assetDataResults.push(assetData);\n      entities.push({\n        key: assetKey,\n        data: assetData,\n      });\n\n    });\n\n    await datastore.upsert(entities);\n\n    return {\n      assetDataResults\n    }\n\n}\n\nasync function _getAssetEntities() {\n  const assetKeys = ASSETS.map(asset => datastore.key(['AssetPrice', asset]));\n  return new Promise((resolve, reject) => {\n    datastore.get(assetKeys).then((results, err) => {\n      results\n       ? resolve(results)\n       : reject(err);\n    });\n  });\n}\n\nfunction _percentChange(startPrice, latestPrice) {\n  const priceDiff = latestPrice - startPrice;\n  return priceDiff/startPrice * 100;\n}\n\nasync function updateAssetPrices() {\n\n    const assetEntities = await _getAssetEntities();\n    const assetPrices = await coinmarketcap.fetchAssetPrices(ASSETS);\n    const entities = [];\n    const assetDataResults = [];\n    assetEntities[0].forEach((assetEntity, index) => {\n      const latestPrice = assetPrices[assetEntity.asset];\n      console.log(`latest price for ${assetEntity.asset} is ${latestPrice}`);\n      const assetKey = datastore.key(['AssetPrice', assetEntity.asset]);\n      const assetData = [\n        {\n          name: 'asset',\n          value: assetEntity.asset,\n        },\n        {\n          name: 'prizePeriodStartPrice',\n          value: assetEntity.prizePeriodStartPrice,\n        },\n        {\n          name: 'latestPrice',\n          value: latestPrice,\n        },\n        {\n          name: 'percentChange',\n          value: _percentChange(assetEntity.prizePeriodStartPrice, latestPrice),\n        },\n      ];\n      //console.log(assetEntity, assetData);\n      assetDataResults.push(assetData);\n      entities.push({\n        key: assetKey,\n        data: assetData,\n      });\n\n    });\n\n    await datastore.upsert(entities);\n\n    return {\n      assetDataResults\n    }\n\n}\n\nasync function getAssetPrices() {\n  const [assetPrices] = await datastore.runQuery(\n    datastore.createQuery('AssetPrice')\n  );\n\n  assetPrices.sort((a, b) => b.percentChange - a.percentChange);\n  return assetPrices.filter(asset => ASSETS.includes(asset.asset));\n}\n\n\n\nasync function getHistory() {\n  const [historyRecords] = await datastore.runQuery(\n    datastore.createQuery('PrizePeriodHistory').order('date', {\n        descending: true,\n    })\n  );\n  return historyRecords;\n}\n\n\n export {\n     startPrizePeriod, endPrizePeriod, updateAssetPrices, getAssetPrices, calculateWinner, getHistory\n };\n"],"file":"asset.js"}