{"version":3,"sources":["../../src/lib/web3interface.js"],"names":["Web3","require","fs","transactionCount","_Web3","infuraSubdomain","process","env","NODE_ENV","web3","INFURA_KEY","signingAccount","eth","accounts","privateKeyToAccount","ETH_PRIVATE_KEY","wallet","add","defaultAccount","address","getPrizeStrategyContract","PrizeStrategyContractAddress","PrizeStrategyContractABI","JSON","parse","readFileSync","Contract","nextNonce","getTransactionCount"],"mappings":";;;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAIE,gBAAgB,GAAG,CAAC,CAAxB;;AAEA,IAAMC,KAAK,GAAG,MAAM;AACnB,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACrB,SADqB,GAErB,SAFH;AAGA,MAAMC,IAAI,GAAG,IAAIT,IAAJ,mBAAoBK,eAApB,2BAAoDC,OAAO,CAACC,GAAR,CAAYG,UAAhE,EAAb;AACA,MAAMC,cAAc,GAAGF,IAAI,CAACG,GAAL,CAASC,QAAT,CAAkBC,mBAAlB,CAAsCR,OAAO,CAACC,GAAR,CAAYQ,eAAlD,CAAvB;AACAN,EAAAA,IAAI,CAACG,GAAL,CAASC,QAAT,CAAkBG,MAAlB,CAAyBC,GAAzB,CAA6BN,cAA7B;AACAF,EAAAA,IAAI,CAACG,GAAL,CAASM,cAAT,GAA0BP,cAAc,CAACQ,OAAzC;AACA,SAAOV,IAAP;AACA,CATD;;;;AAYA,IAAMW,wBAAwB,GAAGX,IAAI,IAAI;AACxC,MAAMY,4BAA4B,GAAG,4CAArC;AACA,MAAMC,wBAAwB,GAAGC,IAAI,CAACC,KAAL,CAAWtB,EAAE,CAACuB,YAAH,CAAgB,wCAAhB,EAA0D,MAA1D,CAAX,CAAjC;AACA,SAAO,IAAIhB,IAAI,CAACG,GAAL,CAASc,QAAb,CAAsBJ,wBAAtB,EAAgDD,4BAAhD,CAAP;AACA,CAJD;;;;SAOeM,S;;;;;iCAAf,aAA2B;AAC1B,QAAGxB,gBAAgB,GAAG,CAAtB,EAAyB;AACxBA,MAAAA,gBAAgB,SAASM,IAAI,CAACG,GAAL,CAASgB,mBAAT,CAA6BjB,cAAc,CAACQ,OAA5C,EAAqD,SAArD,CAAzB;AACA;;AACD,WAAOhB,gBAAgB,EAAvB;AACA,G","sourcesContent":["const Web3 = require('web3');\nconst fs = require('fs');\n\nvar transactionCount = -1;\n\nconst _Web3 = () => {\n\tconst infuraSubdomain = process.env.NODE_ENV === 'production'\n\t\t? 'mainnet'\n\t\t: 'ropsten'\n\tconst web3 = new Web3(`https://${infuraSubdomain}.infura.io/v3/${process.env.INFURA_KEY}`);\n\tconst signingAccount = web3.eth.accounts.privateKeyToAccount(process.env.ETH_PRIVATE_KEY);\n\tweb3.eth.accounts.wallet.add(signingAccount);\n\tweb3.eth.defaultAccount = signingAccount.address;\n\treturn web3;\n}\n\n\nconst getPrizeStrategyContract = web3 => {\n\tconst PrizeStrategyContractAddress = '0x6F5587E191C8b222F634C78111F97c4851663ba4';\n\tconst PrizeStrategyContractABI = JSON.parse(fs.readFileSync('./contracts/PeriodicPrizeStrategy.json', 'utf8'));\n\treturn new web3.eth.Contract(PrizeStrategyContractABI, PrizeStrategyContractAddress);\n}\n\n\nasync function nextNonce() {\n\tif(transactionCount < 0) {\n\t\ttransactionCount = await web3.eth.getTransactionCount(signingAccount.address, \"pending\");\n\t}\n\treturn transactionCount++;\n}\n\nexport {\n    _Web3, getPrizeStrategyContract\n};\n"],"file":"web3interface.js"}