{"version":3,"sources":["../../src/lib/tellor.js"],"names":["loadTellorPrices","priceResults","priceIds","priceAPIPromises","forEach","id","push","Promise","resolve","reject","axios","get","then","res","all","values","rawPrices","map","value","data","priceObj","index","console","log","PSRs","granularity","parseInt","name","e","error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;SAGeA,gB;;;;;wCAAf,WAAgCC,YAAhC,EAA8CC,QAA9C,EAAwD;AAErD,QAAI;AAEH,UAAMC,gBAAgB,GAAG,EAAzB;AAECD,MAAAA,QAAQ,CAACE,OAAT,CAAiBC,EAAE,IAAI;AACrBF,QAAAA,gBAAgB,CAACG,IAAjB,CACE,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,yBAAMC,GAAN,2CAA6CN,EAA7C,GAAmDO,IAAnD,CAAyDC,GAAD,IAAS;AAC/DL,YAAAA,OAAO,CAACK,GAAD,CAAP;AACD,WAFD;AAGD,SAJD,CADF;AAOD,OARD;AAUA,aAAON,OAAO,CAACO,GAAR,CAAYX,gBAAZ,EAA8BS,IAA9B,CAAoCG,MAAD,IAAY;AAEpD,YAAMC,SAAS,GAAG,CAAC,GAAGD,MAAM,CAACE,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACC,IAA1B,CAAJ,CAAlB;AACAH,QAAAA,SAAS,CAACC,GAAV,CAAc,CAACG,QAAD,EAAWC,KAAX,KAAqB;AACjCC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACF,KAArB,EAA4BM,UAAKtB,QAAQ,CAACmB,KAAD,CAAb,EAAsBI,WAAlD,EAA+D,CAACC,QAAQ,CAACN,QAAQ,CAACF,KAAV,CAAT,GAA4B,CAACQ,QAAQ,CAACF,UAAKtB,QAAQ,CAACmB,KAAD,CAAb,EAAsBI,WAAvB,CAApG;AACAxB,UAAAA,YAAY,CAACuB,UAAKtB,QAAQ,CAACmB,KAAD,CAAb,EAAsBM,IAAvB,CAAZ,GACE,CAACD,QAAQ,CAACN,QAAQ,CAACF,KAAV,CAAT,GAA4B,CAACQ,QAAQ,CAACF,UAAKtB,QAAQ,CAACmB,KAAD,CAAb,EAAsBI,WAAvB,CADvC;AAED,SAJD;AAKD,OARM,CAAP;AAUD,KAxBD,CAwBE,OAAOG,CAAP,EAAU;AACVN,MAAAA,OAAO,CAACO,KAAR,CAAcD,CAAd;AACD;AACF,G","sourcesContent":["import axios from \"axios\";\nimport { PSRs } from \"../utils/psr\";\n\n\nasync function loadTellorPrices(priceResults, priceIds) {\n\n   try {\n\n    const priceAPIPromises = [];\n\n     priceIds.forEach(id => {\n       priceAPIPromises.push(\n         new Promise((resolve, reject) => {\n           axios.get(`http://api.tellorscan.com/price/${id}`).then((res) => {\n             resolve(res);\n           });\n         })\n       );\n     });\n\n     return Promise.all(priceAPIPromises).then((values) => {\n\n       const rawPrices = [...values.map(value => value.data)];\n       rawPrices.map((priceObj, index) => {\n         console.log(priceObj.value, PSRs[priceIds[index]].granularity, +parseInt(priceObj.value) / +parseInt(PSRs[priceIds[index]].granularity));\n         priceResults[PSRs[priceIds[index]].name] =\n           +parseInt(priceObj.value) / +parseInt(PSRs[priceIds[index]].granularity);\n       });\n     });\n\n   } catch (e) {\n     console.error(e);\n   }\n }\n\n\n\n\n export {\n     loadTellorPrices\n };\n"],"file":"tellor.js"}